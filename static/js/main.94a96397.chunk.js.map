{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","sortField","setSortField","reverseField","setReverseField","visibleGoods","goods","prepearedGoods","sort","good1","good2","alphabet","localeCompare","length","reverse","getPrepearedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,oBAAAA,E,iBAAAA,M,KAsCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EA/BR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,aAEPI,EAAc,YAAOD,GAqB3B,OAnBIL,GACFM,EAAeC,MAAK,SAACC,EAAOC,GAC1B,OAAQT,GACN,KAAKJ,EAAUc,SACb,OAAOF,EAAMG,cAAcF,GAE7B,KAAKb,EAAUgB,OACb,OAAOJ,EAAMI,OAASH,EAAMG,OAE9B,QACE,OAAO,MAKXV,GACFI,EAAeO,UAGVP,EAMcQ,CACnBjB,EAAiB,CAAEG,YAAWE,iBAGhC,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMf,EAAaL,EAAUc,WACtCO,KAAK,SACLF,UAAWG,IAAG,SAAU,UACtB,CAAE,WAAYlB,IAAcJ,EAAUc,WAJ1C,iCASA,wBACEM,QAAS,kBAAMf,EAAaL,EAAUgB,SACtCK,KAAK,SACLF,UAAWG,IAAG,SAAU,aACtB,CAAE,WAAYlB,IAAcJ,EAAUgB,SAJ1C,4BASA,wBACEI,QAAS,kBAAMb,GAAiBD,IAChCe,KAAK,SACLF,UAAWG,IAAG,SAAU,aACtB,CAAE,YAAahB,IAJnB,sBAUGF,GAAaE,IACZ,wBACEc,QAAS,WACPb,GAAgB,GAChBF,EAAa,KAEfgB,KAAK,SACLF,UAAU,4BANZ,sBAcN,6BACGX,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC5GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.94a96397.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  alphabet = 'alphabet',\n  length = 'length',\n}\n\ninterface SortParms {\n  sortField: string,\n  reverseField: boolean,\n}\n\nfunction getPrepearedGoods(\n  goods: string[],\n  { sortField, reverseField }: SortParms,\n) {\n  const prepearedGoods = [...goods];\n\n  if (sortField) {\n    prepearedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.alphabet:\n          return good1.localeCompare(good2);\n\n        case SortField.length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseField) {\n    prepearedGoods.reverse();\n  }\n\n  return prepearedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverseField, setReverseField] = useState(false);\n  const visibleGoods = getPrepearedGoods(\n    goodsFromServer, { sortField, reverseField },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortField.alphabet)}\n          type=\"button\"\n          className={cn('button', 'is-info',\n            { 'is-light': sortField !== SortField.alphabet })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortField.length)}\n          type=\"button\"\n          className={cn('button', 'is-success',\n            { 'is-light': sortField !== SortField.length })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setReverseField(!reverseField)}\n          type=\"button\"\n          className={cn('button', 'is-warning',\n            { 'is-light': !reverseField })}\n        >\n          Reverse\n        </button>\n\n        {\n          (sortField || reverseField) && (\n            <button\n              onClick={() => {\n                setReverseField(false);\n                setSortField('');\n              }}\n              type=\"button\"\n              className=\"button is-danger is-light\"\n            >\n              Reset\n            </button>\n          )\n        }\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}